// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: services/arith/message.proto

package arith

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArithServiceClient is the client API for ArithService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArithServiceClient interface {
	Add(ctx context.Context, in *ArithRequest, opts ...grpc.CallOption) (*ArithResponse, error)
	Mul(ctx context.Context, in *ArithRequest, opts ...grpc.CallOption) (*ArithResponse, error)
}

type arithServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArithServiceClient(cc grpc.ClientConnInterface) ArithServiceClient {
	return &arithServiceClient{cc}
}

func (c *arithServiceClient) Add(ctx context.Context, in *ArithRequest, opts ...grpc.CallOption) (*ArithResponse, error) {
	out := new(ArithResponse)
	err := c.cc.Invoke(ctx, "/ArithService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithServiceClient) Mul(ctx context.Context, in *ArithRequest, opts ...grpc.CallOption) (*ArithResponse, error) {
	out := new(ArithResponse)
	err := c.cc.Invoke(ctx, "/ArithService/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithServiceServer is the server API for ArithService service.
// All implementations must embed UnimplementedArithServiceServer
// for forward compatibility
type ArithServiceServer interface {
	Add(context.Context, *ArithRequest) (*ArithResponse, error)
	Mul(context.Context, *ArithRequest) (*ArithResponse, error)
	mustEmbedUnimplementedArithServiceServer()
}

// UnimplementedArithServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArithServiceServer struct {
}

func (UnimplementedArithServiceServer) Add(context.Context, *ArithRequest) (*ArithResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedArithServiceServer) Mul(context.Context, *ArithRequest) (*ArithResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}
func (UnimplementedArithServiceServer) mustEmbedUnimplementedArithServiceServer() {}

// UnsafeArithServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArithServiceServer will
// result in compilation errors.
type UnsafeArithServiceServer interface {
	mustEmbedUnimplementedArithServiceServer()
}

func RegisterArithServiceServer(s grpc.ServiceRegistrar, srv ArithServiceServer) {
	s.RegisterService(&ArithService_ServiceDesc, srv)
}

func _ArithService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArithService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServiceServer).Add(ctx, req.(*ArithRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithService_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServiceServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArithService/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServiceServer).Mul(ctx, req.(*ArithRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArithService_ServiceDesc is the grpc.ServiceDesc for ArithService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArithService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArithService",
	HandlerType: (*ArithServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ArithService_Add_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _ArithService_Mul_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/arith/message.proto",
}
