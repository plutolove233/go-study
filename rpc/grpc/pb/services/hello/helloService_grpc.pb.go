// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: services/hello/helloService.proto

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	models "grpc-demo/pb/models"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamClient is the client API for ServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamClient interface {
	SayHi(ctx context.Context, in *models.HelloRequest, opts ...grpc.CallOption) (ServerStream_SayHiClient, error)
}

type serverStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamClient(cc grpc.ClientConnInterface) ServerStreamClient {
	return &serverStreamClient{cc}
}

func (c *serverStreamClient) SayHi(ctx context.Context, in *models.HelloRequest, opts ...grpc.CallOption) (ServerStream_SayHiClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStream_ServiceDesc.Streams[0], "/ServerStream/SayHi", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamSayHiClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStream_SayHiClient interface {
	Recv() (*models.HelloResponse, error)
	grpc.ClientStream
}

type serverStreamSayHiClient struct {
	grpc.ClientStream
}

func (x *serverStreamSayHiClient) Recv() (*models.HelloResponse, error) {
	m := new(models.HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServer is the server API for ServerStream service.
// All implementations must embed UnimplementedServerStreamServer
// for forward compatibility
type ServerStreamServer interface {
	SayHi(*models.HelloRequest, ServerStream_SayHiServer) error
	mustEmbedUnimplementedServerStreamServer()
}

// UnimplementedServerStreamServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamServer struct {
}

func (UnimplementedServerStreamServer) SayHi(*models.HelloRequest, ServerStream_SayHiServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedServerStreamServer) mustEmbedUnimplementedServerStreamServer() {}

// UnsafeServerStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamServer will
// result in compilation errors.
type UnsafeServerStreamServer interface {
	mustEmbedUnimplementedServerStreamServer()
}

func RegisterServerStreamServer(s grpc.ServiceRegistrar, srv ServerStreamServer) {
	s.RegisterService(&ServerStream_ServiceDesc, srv)
}

func _ServerStream_SayHi_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(models.HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServer).SayHi(m, &serverStreamSayHiServer{stream})
}

type ServerStream_SayHiServer interface {
	Send(*models.HelloResponse) error
	grpc.ServerStream
}

type serverStreamSayHiServer struct {
	grpc.ServerStream
}

func (x *serverStreamSayHiServer) Send(m *models.HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStream_ServiceDesc is the grpc.ServiceDesc for ServerStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerStream",
	HandlerType: (*ServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHi",
			Handler:       _ServerStream_SayHi_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/hello/helloService.proto",
}

// ClientStreamClient is the client API for ClientStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStreamClient interface {
	SayHi(ctx context.Context, opts ...grpc.CallOption) (ClientStream_SayHiClient, error)
}

type clientStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamClient(cc grpc.ClientConnInterface) ClientStreamClient {
	return &clientStreamClient{cc}
}

func (c *clientStreamClient) SayHi(ctx context.Context, opts ...grpc.CallOption) (ClientStream_SayHiClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientStream_ServiceDesc.Streams[0], "/ClientStream/SayHi", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamSayHiClient{stream}
	return x, nil
}

type ClientStream_SayHiClient interface {
	Send(*models.HelloRequest) error
	CloseAndRecv() (*models.HelloResponse, error)
	grpc.ClientStream
}

type clientStreamSayHiClient struct {
	grpc.ClientStream
}

func (x *clientStreamSayHiClient) Send(m *models.HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamSayHiClient) CloseAndRecv() (*models.HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(models.HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamServer is the server API for ClientStream service.
// All implementations must embed UnimplementedClientStreamServer
// for forward compatibility
type ClientStreamServer interface {
	SayHi(ClientStream_SayHiServer) error
	mustEmbedUnimplementedClientStreamServer()
}

// UnimplementedClientStreamServer must be embedded to have forward compatible implementations.
type UnimplementedClientStreamServer struct {
}

func (UnimplementedClientStreamServer) SayHi(ClientStream_SayHiServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedClientStreamServer) mustEmbedUnimplementedClientStreamServer() {}

// UnsafeClientStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamServer will
// result in compilation errors.
type UnsafeClientStreamServer interface {
	mustEmbedUnimplementedClientStreamServer()
}

func RegisterClientStreamServer(s grpc.ServiceRegistrar, srv ClientStreamServer) {
	s.RegisterService(&ClientStream_ServiceDesc, srv)
}

func _ClientStream_SayHi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamServer).SayHi(&clientStreamSayHiServer{stream})
}

type ClientStream_SayHiServer interface {
	SendAndClose(*models.HelloResponse) error
	Recv() (*models.HelloRequest, error)
	grpc.ServerStream
}

type clientStreamSayHiServer struct {
	grpc.ServerStream
}

func (x *clientStreamSayHiServer) SendAndClose(m *models.HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamSayHiServer) Recv() (*models.HelloRequest, error) {
	m := new(models.HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStream_ServiceDesc is the grpc.ServiceDesc for ClientStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientStream",
	HandlerType: (*ClientStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHi",
			Handler:       _ClientStream_SayHi_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/hello/helloService.proto",
}
