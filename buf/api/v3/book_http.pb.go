// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             (unknown)
// source: book.proto

package v3

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBookServiceCreateBook = "/v3.BookService/CreateBook"

type BookServiceHTTPServer interface {
	CreateBook(context.Context, *CreateBookReq) (*CreateBookResp, error)
}

func RegisterBookServiceHTTPServer(s *http.Server, srv BookServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/book", _BookService_CreateBook0_HTTP_Handler(srv))
}

func _BookService_CreateBook0_HTTP_Handler(srv BookServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBookReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBookServiceCreateBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBook(ctx, req.(*CreateBookReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBookResp)
		return ctx.Result(200, reply)
	}
}

type BookServiceHTTPClient interface {
	CreateBook(ctx context.Context, req *CreateBookReq, opts ...http.CallOption) (rsp *CreateBookResp, err error)
}

type BookServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBookServiceHTTPClient(client *http.Client) BookServiceHTTPClient {
	return &BookServiceHTTPClientImpl{client}
}

func (c *BookServiceHTTPClientImpl) CreateBook(ctx context.Context, in *CreateBookReq, opts ...http.CallOption) (*CreateBookResp, error) {
	var out CreateBookResp
	pattern := "/v1/book"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBookServiceCreateBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
